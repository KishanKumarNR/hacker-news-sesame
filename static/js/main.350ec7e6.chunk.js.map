{"version":3,"sources":["styles/global.js","services/Api.js","services/hackerNewsApi.js","store/story/actions.js","store/story/selectors.js","styles/palette.js","utils/getSiteHostname.js","utils/getArticleLink.js","components/ListItem/styles.js","components/ListItem/index.js","components/List/styles.js","components/List/index.js","components/App/styles.js","styles/mediaQueries.js","components/Loader/styles.js","components/Loader/index.js","components/App/App.js","components/App/index.js","serviceWorker.js","store/app/actions.js","store/app/reducer.js","store/story/reducers.js","store/reducer.js","store/middleware.js","store/index.js","index.js"],"names":["GlobalStyles","createGlobalStyle","API_ROOT","process","URL","HEADERS","Accept","client","baseURL","timeout","headers","auth","axios","create","interceptors","response","use","this","handleSuccess","handleError","error","Promise","reject","path","get","then","data","payload","post","put","patch","delete","hackerNewsApi","getTopStoryIds","getStory","id","getStoriesByPage","ids","page","limit","begin","end","getPageSlice","storyPromises","items","slice","getPageValues","map","all","NS","actionTypes","FETCH_STORY_IDS_REQUEST","FETCH_STORY_IDS_SUCCESS","FETCH_STORY_IDS_FAILURE","FETCH_STORIES_REQUEST","FETCH_STORIES_SUCCESS","FETCH_STORIES_FAILURE","action","type","actions","fetchStoryIds","dispatch","storyIds","fetchStories","catch","err","stories","hasMoreStoriesSelector","createSelector","state","story","length","colorsDark","background","backgroundSecondary","text","textSecondary","border","getSiteHostname","siteUrl","hostname","includes","url","parse","split","HN_ROOT","HN_ITEM","HN_USER","getArticleLink","commentUrl","Item","styled","li","theme","Title","h3","Host","span","ExternalLink","a","Description","div","CommentLink","LINK_REL","ListItem","by","kids","score","title","time","site","link","userUrl","href","rel","target","format","Date","toISOString","ListWrapper","ul","List","key","Wrapper","h1","props","blink","keyframes","Animation","Loader","App","isFetching","fetchStoriesFirstPage","hasMoreStories","dataLength","next","hasMore","loader","style","height","overflow","React","Component","connect","Boolean","window","location","match","SET_THEME","app","console","log","rootReducer","combineReducers","middlewareList","push","thunk","middleware","compose","applyMiddleware","configureStore","initialState","createStore","reducer","store","ReactDOM","render","document","getElementById","renderApp","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"kvBAEA,IAwBeA,EAxBMC,YAAH,K,wCCCZC,EAAWC,sIAAYC,KAAO,yBAE9BC,EAAU,CACZ,eAAgB,mBAChBC,OAAQ,oBCLNC,EAAS,I,WDSX,cAAiF,IAAD,IAAlEC,eAAkE,MAAxDN,EAAwD,MAA9CO,eAA8C,MAPpE,IAOoE,MAA3BC,eAA2B,MAAjBL,EAAiB,EAARM,EAAQ,EAARA,KAAQ,oBAC5E,IAAMJ,EAASK,IAAMC,OAAO,CACxBL,UACAC,UACAC,UACAC,SAGJJ,EAAOO,aAAaC,SAASC,IAAIC,KAAKC,cAAeD,KAAKE,aAC1DF,KAAKV,OAASA,E,0DAGJQ,GACV,OAAOA,I,kCAGCK,GACR,OAAOC,QAAQC,OAAOF,K,0BAGtBG,GACA,OAAON,KAAKV,OAAOiB,IAAID,GAAME,MAAK,SAAAV,GAAQ,OAAIA,EAASW,U,2BAGtDH,EAAMI,GACP,OAAOV,KAAKV,OAAOqB,KAAKL,EAAMI,GAASF,MAAK,SAAAV,GAAQ,OAAIA,EAASW,U,0BAGjEH,EAAMI,GACN,OAAOV,KAAKV,OAAOsB,IAAIN,EAAMI,GAASF,MAAK,SAAAV,GAAQ,OAAIA,EAASW,U,4BAG9DH,EAAMI,GACR,OAAOV,KAAKV,OAAOuB,MAAMP,EAAMI,GAASF,MAAK,SAAAV,GAAQ,OAAIA,EAASW,U,6BAG/DH,GACH,OAAON,KAAKV,OAAOwB,OAAOR,GAAME,MAAK,SAAAV,GAAQ,OAAIA,EAASW,Y,KC9CnD,CAAe,CAAElB,QADf,0CAIXwB,EAAgB,GAItBA,EAAcC,eAAiB,kBAAM1B,EAAOiB,IAAP,qBANlB,wBAOnBQ,EAAcE,SAAW,SAACC,GAAD,OAAQ5B,EAAOiB,IAAP,gBAAoBW,GAApB,OAPd,wBAQnBH,EAAcI,iBAAmB,SAACC,EAAKC,GAAU,IAAD,EAL3B,SAACC,GAAD,IAAQD,EAAR,uDAAe,EAAf,MAAsB,CAACE,MAAOF,EAAOC,EAAOE,KAAMH,EAAK,GAAKC,GAMtDG,CARR,GAQiCJ,GAE1CK,EAPY,SAAC,GAAD,IAAEH,EAAF,EAAEA,MAAOC,EAAT,EAASA,IAAT,SAAcG,MAAiBC,MAAML,EAAOC,GAM5CK,CAAc,CAACN,MAFW,EACpCA,MACgCC,IAFI,EAC7BA,IAC8BG,MAAOP,IACpBU,KAAI,SAAAZ,GAAE,OAAIH,EAAcE,SAASC,MACjE,OAAOd,QAAQ2B,IAAIL,IAGRX,QChBTiB,EAAK,iBAEEC,EAAc,CACzBC,wBAAwB,GAAD,OAAKF,EAAL,4BACvBG,wBAAwB,GAAD,OAAKH,EAAL,4BACvBI,wBAAwB,GAAD,OAAKJ,EAAL,4BACvBK,sBAAsB,GAAD,OAAKL,EAAL,wBACrBM,sBAAsB,GAAD,OAAKN,EAAL,wBACrBO,sBAAsB,GAAD,OAAKP,EAAL,yBAGjBQ,EAAS,SAACC,EAAM/B,GAAP,MAAoB,CAC/B+B,OAAM/B,YAGJgC,EAAU,CACZC,cAAe,WAAmB,IAAlBjC,EAAiB,uDAAP,GACtB,OAAO,SAAAkC,GAGH,OAFAA,EAASJ,EAAOP,EAAYC,yBAA0BxB,GAE/CK,EAAcC,iBAChBR,MAAK,SAAAqC,GAGF,OAFAD,EAASJ,EAAOP,EAAYE,wBAAyB,CAACU,cACtDD,EAASF,EAAQI,aAAa,CAACD,WAAUxB,KAAM,KACxCwB,KAGVE,OAAM,SAAAC,GAAG,OAAIJ,EAASJ,EAAOP,EAAYM,sBAAuBS,SAG7EF,aAAc,WAAmB,IAAlBpC,EAAiB,uDAAP,GACrB,OAAO,SAAAkC,GACHA,EAASJ,EAAOP,EAAYI,sBAAuB3B,IADpC,IAEPmC,EAAmBnC,EAAnBmC,SAAUxB,EAASX,EAATW,KAClB,OAAON,EAAcI,iBAAiB0B,EAAUxB,GAC3Cb,MAAK,SAAAyC,GAAO,OAAIL,EAASJ,EAAOP,EAAYK,sBAAuB,CAACW,gBACpEF,OAAM,SAAAC,GAAG,OAAIJ,EAASJ,EAAOP,EAAYG,wBAAyBY,UAKpEN,I,QCtCFQ,EAA0BC,aAHd,SAAAC,GAAK,OAAIA,EAAMC,MAAMR,YACtB,SAAAO,GAAK,OAAIA,EAAMC,MAAMJ,WAKzC,SAACJ,EAAUI,GAAX,OAAuBJ,EAASS,OAASL,EAAQK,U,gBCRxCC,EAAa,CACtBC,WAAY,UACZC,oBAAqB,UACrBC,KAAM,UACNC,cAAe,UACfC,OAAQ,W,yBCeGC,EAlBS,SAAAC,GACpB,IAAIC,EAAW,GAcf,OAZID,IACKA,EAAQE,SAAS,QAClBF,EAAO,iBAAaA,IAGxBC,EAAWE,IAAIC,MAAMJ,GAASC,UAG9BA,EAASC,SAAS,UAClBD,EAAWA,EAASI,MAAM,QAAQ,IAG/BJ,GCjBEK,EAAU,+BACVC,EAAO,UAAMD,EAAN,aACPE,EAAO,UAAMF,EAAN,aASLG,EAPQ,SAAC,GAAiB,IAAfN,EAAc,EAAdA,IAAK/C,EAAS,EAATA,GACrBsD,EAAU,UAAMH,GAAN,OAAgBnD,GAGhC,OAFe+C,GAAYO,G,o5BCJxB,IAAMC,EAAOC,IAAOC,GAAV,KACY,qBAAGC,MAAkBhB,UAOrCiB,EAAQH,IAAOI,GAAV,KACP,qBAAGF,MAAkBlB,QAQnBqB,EAAOL,IAAOM,KAAV,KACN,qBAAGJ,MAAkBjB,iBAInBsB,EAAeP,IAAOQ,EAAV,KACd,qBAAGN,MAAkBlB,QASnByB,EAAcT,IAAOU,IAAV,KAEb,qBAAGR,MAAkBjB,iBAGnB0B,EAAcX,IAAOQ,EAAV,KACb,qBAAGN,MAAkBjB,iBAEnB,qBAAGiB,MAAkBjB,iBCnC5B2B,EAAW,+BAkCFC,EAhCE,SAAC,GAAwD,IAAvDC,EAAsD,EAAtDA,GAAsD,IAAlDC,YAAkD,MAA3C,GAA2C,EAAvCC,EAAuC,EAAvCA,MAAOzB,EAAgC,EAAhCA,IAAK0B,EAA2B,EAA3BA,MAAOzE,EAAoB,EAApBA,GAAU0E,GAAU,EAAhBnD,KAAgB,EAAVmD,MAErDC,EAAOhC,EAAgBI,IAAQG,EAC/B0B,EAAOvB,EAAe,CAACN,MAAK/C,OAC5BsD,EAAU,UAAMH,GAAN,OAAgBnD,GAC1B6E,EAAO,UAAMzB,GAAN,OAAgBkB,GAG7B,OACI,kBAACf,EAAD,KACI,kBAACQ,EAAD,CAAce,KAAMF,EAAMG,IAAKX,EAAUY,OAAO,UAC5C,kBAACrB,EAAD,KACKc,EACD,kBAACZ,EAAD,SACMc,EADN,OAKR,kBAACV,EAAD,KACKO,EADL,cACuB,IACnB,kBAACL,EAAD,CAAaW,KAAMD,EAASE,IAAKX,EAAUY,OAAO,UAC7CV,GAEJW,YAAO,IAAIC,KAAU,IAALR,GAAWS,eALhC,IAKiD,MAC7C,kBAAChB,EAAD,CAAaW,KAAMxB,EAAYyB,IAAKX,EAAUY,OAAO,UAChDT,EAAKnC,OADV,gB,0OC/BT,IAAMgD,GAAc5B,IAAO6B,GAAV,KACF,qBAAG3B,MAAkBnB,uBCS5B+C,GANF,SAAC,GAAD,IAAEvD,EAAF,EAAEA,QAAF,OACT,kBAACqD,GAAD,KACKrD,EAAQnB,KAAI,SAAAuB,GAAK,OAAI,kBAAC,EAAD,iBAAcA,EAAd,CAAqBoD,IAAKpD,EAAMnC,W,idCLvD,IAAMwF,GAAUhC,IAAOU,IAAV,KCFE,6CDeTP,GAAQH,IAAOiC,GAAV,MACD,SAAAC,GAAK,OAAIA,EAAMhC,MAAMjB,iB,2vBEftC,IAAMkD,GAAQC,YAAH,MAYEC,GAAYrC,IAAOU,IAAV,MAIL,qBAAER,MAAiBjB,gBAMVkD,ICZXG,GARA,kBACX,kBAACD,GAAD,KACI,mCACA,mCACA,qCC+COE,I,kNApCXnE,aAAe,WAAO,IAAD,EACoC,EAAK8D,MAAlD/D,EADS,EACTA,SAAUxB,EADD,EACCA,KAAMyB,EADP,EACOA,aADP,EACqBoE,YAElCpE,EAAa,CAACD,WAAUxB,U,kEAN5BrB,KAAK4G,MAAMO,0B,+BAUL,IAAD,EAC6BnH,KAAK4G,MAAjC3D,EADD,EACCA,QAASmE,EADV,EACUA,eAEnB,OACI,kBAAC,IAAD,CAAexC,MAAOrB,GACpB,6BACE,kBAACmD,GAAD,KACE,kBAAC,GAAD,2BAGE,kBAAC,KAAD,CACIW,WAAcpE,EAAQK,OACtBgE,KAAMtH,KAAK8C,aACXyE,QAASH,EACTI,OAAQ,kBAAC,GAAD,MACRC,MAAO,CACHC,OAAQ,OACRC,SAAU,YAGpB,kBAAC,GAAD,CAAM1E,QAASA,Y,GAjCX2E,IAAMC,YCMTC,gBAbS,SAAA1E,GAAK,MAAK,CAC9BH,QAASG,EAAMC,MAAMJ,QACrB5B,KAAM+B,EAAMC,MAAMhC,KAClBwB,SAAUO,EAAMC,MAAMR,SACtBqE,WAAY9D,EAAMC,MAAM6D,WACxBE,eAAgBlE,EAAuBE,OAGlB,SAAAR,GAAQ,MAAK,CAClCuE,sBAAuB,kBAAMvE,EAASF,EAAQC,kBAC9CG,aAAc,gBAAED,EAAF,EAAEA,SAAUxB,EAAZ,EAAYA,KAAZ,OAAsBuB,EAASF,EAAQI,aAAa,CAACD,WAAUxB,cAGlEyG,CAA2Cb,ICPtCc,QACW,cAA7BC,OAAOC,SAASlE,UAEe,UAA7BiE,OAAOC,SAASlE,UAEhBiE,OAAOC,SAASlE,SAASmE,MACvB,2D,oBChBOjG,GAAc,CACvBkG,UAAU,GAAD,OAHF,eAGE,eCgBEC,GAZH,WAAiD,IAAhDhF,EAA+C,uDAL7B,CAC3BwB,MAAO,QAIiD,yCAAnBnC,EAAmB,EAAnBA,KAAM/B,EAAa,EAAbA,QAC3C,OAAO+B,GACH,KAAKR,GAAYkG,UACb,OAAO,6BACA/E,GACA1C,GAEX,QACI,OAAO0C,I,SCwBJC,GA7BD,WAAiD,IAAhDD,EAA+C,uDAR/B,CAC3BP,SAAU,GACVI,QAAS,GACT5B,KAAM,EACN6F,YAAY,EACZ/G,MAAO,IAGmD,yCAAnBsC,EAAmB,EAAnBA,KAAM/B,EAAa,EAAbA,QAC7C,OAAO+B,GACH,KAAKR,EAAYC,wBACjB,KAAKD,EAAYI,sBACb,OAAO,6BACAe,GADP,IAEI8D,YAAY,IAEpB,KAAKjF,EAAYE,wBACb,OAAO,6BACAiB,GACA1C,GAEX,KAAKuB,EAAYK,sBACb,OAAO,6BACAc,GADP,IAEIH,QAAQ,GAAD,oBAAMG,EAAMH,SAAZ,aAAwBvC,EAAQuC,UACvC5B,KAAM+B,EAAM/B,KAAO,EACnB6F,YAAY,IAEpB,KAAKjF,EAAYG,wBACjB,KAAKH,EAAYM,sBAEb,OADA8F,QAAQC,IAAI7F,EAAM/B,GACX0C,EACX,QACI,OAAOA,IC1BJmF,GALKC,aAAgB,CACjCJ,OACA/E,W,SCAGoF,I,MAAiB,IAEvBA,GAAeC,KAAKC,MAMpB,IAGgBC,GAHGC,aAAQC,KAAe,WAAf,EAAmBL,KCL/BM,GALQ,SAAAC,GAEnB,OADcC,aAAYC,GAASF,EAAcJ,KCKrD7H,EAAcC,iBAAiBR,MAAK,SAAAY,GAAG,OAAIiH,QAAQC,IAAIlH,OAErC,WACd,IACM+H,EAAQJ,GADO,IAErBI,EAAMvG,SAAS,CAAEH,KAAM,oBACvB2G,IAASC,OACL,kBAAC,IAAD,CAAUF,MAAOA,GACb,kBAAC,EAAD,MACA,kBAAC,GAAD,OAGJG,SAASC,eAAe,SAIhCC,GPyGM,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnJ,MAAK,SAAAoJ,GACJA,EAAaC,gBAEd9G,OAAM,SAAA5C,GACLkI,QAAQlI,MAAMA,EAAM2J,c","file":"static/js/main.350ec7e6.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyles = createGlobalStyle`\n    * {\n      box-sizing: border-box;\n    }\n    html, body {\n      font-family: Lato,Helvetica-Neue,Helvetica,Arial,sans-serif;\n      width: 100vw;\n      overflow-x: hidden;\n      margin: 0;\n      padding: 0;\n      background: \"black\";\n    }\n    ul {\n      list-style: none;\n      padding: 0;\n    }\n    a {\n      text-decoration: none;\n      &:visited {\n        color: inherit;\n      }\n    }\n  `;\n\nexport default GlobalStyles;","import axios from 'axios';\n\n// Default API will be your root\nconst API_ROOT = process.env.URL || 'http://localhost:3000/';\nconst TIMEOUT = 20000;\nconst HEADERS = {\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n};\n\nclass ApiService {\n    constructor({ baseURL = API_ROOT, timeout = TIMEOUT, headers = HEADERS, auth }) {\n        const client = axios.create({\n            baseURL,\n            timeout,\n            headers,\n            auth,\n        });\n\n        client.interceptors.response.use(this.handleSuccess, this.handleError);\n        this.client = client;\n    }\n\n    handleSuccess(response) {\n        return response;\n    }\n\n    handleError(error) {\n        return Promise.reject(error);\n    }\n\n    get(path) {\n        return this.client.get(path).then(response => response.data);\n    }\n\n    post(path, payload) {\n        return this.client.post(path, payload).then(response => response.data);\n    }\n\n    put(path, payload) {\n        return this.client.put(path, payload).then(response => response.data);\n    }\n\n    patch(path, payload) {\n        return this.client.patch(path, payload).then(response => response.data);\n    }\n\n    delete(path) {\n        return this.client.delete(path).then(response => response.data);\n    }\n}\n\nexport default ApiService;","import ApiService from \"./Api\";\nconst BASE_URL = \"https://hacker-news.firebaseio.com/v0\";\nconst client = new ApiService({ baseURL: BASE_URL})\nconst JSON_QUERY = '.json?print=pretty';\nconst PAGE_LIMIT = 20;\nconst hackerNewsApi = {};\nconst getPageSlice = (limit, page = 0) => ({begin: page * limit, end: (page+1) * limit});\nconst getPageValues = ({begin, end, items}) => items.slice(begin, end);\n\nhackerNewsApi.getTopStoryIds = () => client.get(`/topstories${JSON_QUERY}`);\nhackerNewsApi.getStory = (id) => client.get(`/item/${id}${JSON_QUERY}`);\nhackerNewsApi.getStoriesByPage = (ids, page) => {\n    const { begin, end } = getPageSlice(PAGE_LIMIT, page);\n    const activeIds = getPageValues({begin, end, items: ids});\n    const storyPromises = activeIds.map(id => hackerNewsApi.getStory(id));\n    return Promise.all(storyPromises);\n};\n\nexport default hackerNewsApi;\n\n","import hackerNewsApi from \"../../services/hackerNewsApi\";\n\nconst NS = \"@hnClone/story\";\n\nexport const actionTypes = {\n  FETCH_STORY_IDS_REQUEST: `${NS}/FETCH_STORY_IDS_REQUEST`,\n  FETCH_STORY_IDS_SUCCESS: `${NS}/FETCH_STORY_IDS_SUCCESS`,\n  FETCH_STORY_IDS_FAILURE: `${NS}/FETCH_STORY_IDS_FAILURE`,\n  FETCH_STORIES_REQUEST: `${NS}/FETCH_STORY_REQUEST`,\n  FETCH_STORIES_SUCCESS: `${NS}/FETCH_STORY_SUCCESS`,\n  FETCH_STORIES_FAILURE: `${NS}/FETCH_STORY_FAILURE`,\n};\n\nconst action = (type, payload) => ({\n    type, payload\n});\n\nconst actions = {\n    fetchStoryIds: (payload = {}) => {\n        return dispatch => {\n            dispatch(action(actionTypes.FETCH_STORY_IDS_REQUEST), payload);\n\n            return hackerNewsApi.getTopStoryIds()\n                .then(storyIds => {\n                    dispatch(action(actionTypes.FETCH_STORY_IDS_SUCCESS, {storyIds}));\n                    dispatch(actions.fetchStories({storyIds, page: 0}));\n                    return storyIds;\n\n                })\n                .catch(err => dispatch(action(actionTypes.FETCH_STORIES_FAILURE, err)));\n        }\n    },\n    fetchStories: (payload = {}) => {\n        return dispatch => {\n            dispatch(action(actionTypes.FETCH_STORIES_REQUEST, payload));\n            const { storyIds, page } = payload;\n            return hackerNewsApi.getStoriesByPage(storyIds, page)\n                .then(stories => dispatch(action(actionTypes.FETCH_STORIES_SUCCESS, {stories})))\n                .catch(err => dispatch(action(actionTypes.FETCH_STORY_IDS_FAILURE, err)));\n        }\n    }\n}\n\nexport default actions;","import { createSelector } from \"reselect\";\n\nconst storyIdsSelector = state => state.story.storyIds;\nconst storiesSelector = state => state.story.stories;\n\nexport const hasMoreStoriesSelector =  createSelector(\n    storyIdsSelector,\n    storiesSelector,\n    (storyIds, stories) => storyIds.length > stories.length\n);","export const colorsDark = {\n    background: '#272727',\n    backgroundSecondary: '#393C3E',\n    text: '#bfbebe',\n    textSecondary: '#848886',\n    border: '#272727',\n};\n\nexport const colorsLight = {\n    background: '#EAEAEA',\n    backgroundSecondary: '#F8F8F8',\n    text: '#848886',\n    textSecondary: '#aaaaaa',\n    border: '#EAEAEA',\n};","import url from 'url';\n\nconst getSiteHostname = siteUrl => {\n    let hostname = '';\n\n    if (siteUrl) {\n        if (!siteUrl.includes('//')) {\n            siteUrl = `http://${siteUrl}`;\n        }\n\n        hostname = url.parse(siteUrl).hostname;\n    }\n\n    if (hostname.includes('www.')) {\n        hostname = hostname.split('www.')[1];\n    }\n\n    return hostname;\n};\n\nexport default getSiteHostname;","export const HN_ROOT = 'https://news.ycombinator.com';\nexport const HN_ITEM = `${HN_ROOT}/item?id=`;\nexport const HN_USER = `${HN_ROOT}/user?id=`;\n\nconst getArticleLink = ({ url, id }) => {\n    const commentUrl = `${HN_ITEM}${id}`;\n    const link = !!url ? url : commentUrl;\n\n    return link;\n};\n\nexport default getArticleLink;","import styled from 'styled-components';\n\nexport const Item = styled.li`\n  border-bottom: 1px solid ${({ theme }) => theme.border};\n  padding: 14px 24px;\n  &:last-child {\n    border-bottom: none;\n  }\n`;\n\nexport const Title = styled.h3`\n  color: ${({ theme }) => theme.text};\n  margin-top: 0;\n  margin-bottom: 6px;\n  font-weight: 400;\n  font-size: 16px;\n  letter-spacing: 0.4px;\n`;\n\nexport const Host = styled.span`\n  color: ${({ theme }) => theme.textSecondary};\n  font-size: 12px;\n`;\n\nexport const ExternalLink = styled.a`\n  color: ${({ theme }) => theme.text};\n  display: flex;\n  width: 100%;\n  height: 100%;\n  flex-direction: row;\n  align-items: center;\n  text-decoration: none;\n`;\n\nexport const Description = styled.div`\n  font-size: 14px;\n  color: ${({ theme }) => theme.textSecondary};\n`;\n\nexport const CommentLink = styled.a`\n  color: ${({ theme }) => theme.textSecondary};\n  &:visited {\n    color: ${({ theme }) => theme.textSecondary};\n  }\n`;","import React from \"react\";\nimport {format} from \"timeago.js\";\nimport getSiteHostname from \"../../utils/getSiteHostname\";\nimport getArticleLink, {HN_USER, HN_ITEM, HN_ROOT} from \"../../utils/getArticleLink\";\n\nimport { Item, Title, Host, ExternalLink, Description, CommentLink } from \"./styles\";\n\nconst LINK_REL = \"noopener noreferrer nofollow\";\n\nconst ListItem = ({by, kids = [], score, url, title, id, type, time}) => {\n\n    const site = getSiteHostname(url) || HN_ROOT;\n    const link = getArticleLink({url, id});\n    const commentUrl = `${HN_ITEM}${id}`;\n    const userUrl = `${HN_USER}${by}`;\n\n\n    return (\n        <Item>\n            <ExternalLink href={link} rel={LINK_REL} target=\"_blank\">\n                <Title>\n                    {title}\n                    <Host>\n                        ({site})\n                    </Host>\n                </Title>\n            </ExternalLink>\n            <Description>\n                {score} points by {\" \"}\n                <CommentLink href={userUrl} rel={LINK_REL} target=\"_blank\">\n                    {by}\n                </CommentLink>\n                {format(new Date(time*1000).toISOString())} {' | '}\n                <CommentLink href={commentUrl} rel={LINK_REL} target=\"_blank\">\n                    {kids.length} Comments\n                </CommentLink>\n            </Description>\n        </Item>\n    )\n};\n\nexport default ListItem;","import styled from 'styled-components';\n\nexport const ListWrapper = styled.ul`\n  background-color: ${({ theme }) => theme.backgroundSecondary};\n  border-radius: 4px;\n  margin-left: auto;\n  margin-right: auto;\n  margin-bottom: 20px;\n  display: flex;\n  flex-direction: column;\n`;","import React from \"react\";\nimport ListItem from \"../ListItem\";\n\n\nimport { ListWrapper } from \"./styles\";\n\nconst List = ({stories}) => (\n    <ListWrapper>\n        {stories.map(story => <ListItem {...story} key={story.id} />)}\n    </ListWrapper>\n)\n\nexport default List;\n","import styled from \"styled-components\";\nimport {tablet} from \"../../styles/mediaQueries\";\n\nexport const Wrapper = styled.div`\n    width: 85%;\n    margin-left: auto;\n    margin-right: auto;\n    height: 100%;\n    overflow: hidden;\n    padding-bottom: 200px;\n    \n    ${tablet} (\n        width: 96%;\n    )\n    `;\n\nexport const Title = styled.h1`\n        color: ${props => props.theme.textSecondary};\n        font-size: 20px;\n        font-weight: 300;\n        margin-top: 24px;\n        margin-botom: 25px;\n    `;","export const mobile = '@media only screen and (max-width: 480px)';\nexport const tablet = '@media only screen and (max-width: 768px)';\nexport const desktop = '@media only screen and (max-width: 480px)';","import styled, {keyframes} from \"styled-components\";\n\nconst blink = keyframes`\n    0% {\n        opacity: .2;\n    }\n    20% {\n        opacity: 1;\n    }\n    100% {\n        opacity: .2;\n    }\n`;\n\nexport const Animation = styled.div`\n    text-align: center;\n    \n    span {\n        color: ${({theme}) => theme.textSecondary};\n        display:  inline-block;\n        margin-left: 4px;\n        margin-right: 4px;\n        font-size: 80px;\n        line-height: 0.1;\n        animation-name: ${blink};\n        animation-duration: 1s;\n        animation-iteration-count: infinite;\n        animation-fill-node: both;\n    }\n    \n    span:nth-child(2) {\n        animation-delay: .2s;\n    }\n    span:nth-child(3) {\n        animation-delay: .4s;\n    }\n`;\n\n","import React from \"react\";\n\nimport { Animation } from \"./styles\";\n\nconst Loader = () => (\n    <Animation>\n        <span>.</span>\n        <span>.</span>\n        <span>.</span>\n    </Animation>\n);\n\nexport default Loader;","import React from 'react';\nimport { ThemeProvider } from \"styled-components\";\nimport { colorsDark } from \"../../styles/palette\";\n\nimport List from \"../List\";\nimport {Wrapper, Title} from \"./styles\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport Loader from \"../Loader\";\n\n\nimport './App.css';\n\n\nclass App extends React.Component {\n\n    componentDidMount() {\n        this.props.fetchStoriesFirstPage()\n    }\n\n    fetchStories = () => {\n        const { storyIds, page, fetchStories, isFetching } = this.props;\n        if (!isFetching) {\n            fetchStories({storyIds, page});\n        }\n    }\n\n    render() {\n      const { stories, hasMoreStories } = this.props;\n\n    return (\n        <ThemeProvider theme={colorsDark}>\n          <div>\n            <Wrapper>\n              <Title>\n                Hacker News Reader\n              </Title>\n                <InfiniteScroll\n                    dataLength = {stories.length}\n                    next={this.fetchStories}\n                    hasMore={hasMoreStories}\n                    loader={<Loader/>}\n                    style={{\n                        height: \"100%\",\n                        overflow: \"visible\",\n                    }}\n                >\n              <List stories={stories}/>\n                </InfiniteScroll>\n            </Wrapper>\n          </div>\n        </ThemeProvider>\n    );\n  }\n}\n\nexport default App;","import {connect} from \"react-redux\";\nimport actions from \"../../store/story/actions\";\nimport {hasMoreStoriesSelector} from \"../../store/story/selectors\";\n\nimport App from \"./App\";\n\nconst mapStateToProps = state => ({\n    stories: state.story.stories,\n    page: state.story.page,\n    storyIds: state.story.storyIds,\n    isFetching: state.story.isFetching,\n    hasMoreStories: hasMoreStoriesSelector(state)\n});\n\nconst mapDispatchProps = dispatch => ({\n    fetchStoriesFirstPage: () => dispatch(actions.fetchStoryIds()),\n    fetchStories: ({storyIds, page}) => dispatch(actions.fetchStories({storyIds, page})),\n});\n\nexport default connect(mapStateToProps, mapDispatchProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const NS = \"@hnClone/app\";\n\nexport const actionTypes = {\n    SET_THEME: `${NS}/SET_THEME`\n}\n\nconst actions = {\n    setTheme: (payload = {}) => ({\n        type: actionTypes.SET_THEME, payload\n    })\n};\n\nexport default actions;\n","import {actionTypes} from \"./actions\";\n\nconst getInitialState = () => ({\n    theme: \"dark\",\n})\n\n\nconst app = (state = getInitialState(), {type, payload}) => {\n    switch(type) {\n        case actionTypes.SET_THEME:\n            return {\n                ...state,\n                ...payload, // { theme: <VALUE> }\n            }\n        default:\n            return state;\n    }\n};\n\nexport default app;","import { actionTypes } from \"./actions\";\n\nconst getInitialState = () => ({\n    storyIds: [],\n    stories: [],\n    page: 0,\n    isFetching: false,\n    error: \"\"\n});\n\nconst story = (state = getInitialState(), {type, payload}) => {\n    switch(type) {\n        case actionTypes.FETCH_STORY_IDS_REQUEST:\n        case actionTypes.FETCH_STORIES_REQUEST:\n            return {\n                ...state,\n                isFetching: true,\n            };\n        case actionTypes.FETCH_STORY_IDS_SUCCESS:\n            return {\n                ...state,\n                ...payload,\n            };\n        case actionTypes.FETCH_STORIES_SUCCESS:\n            return {\n                ...state,\n                stories: [...state.stories, ...payload.stories],\n                page: state.page + 1,\n                isFetching: false\n            };\n        case actionTypes.FETCH_STORY_IDS_FAILURE:\n        case actionTypes.FETCH_STORIES_FAILURE:\n            console.log(type, payload);\n            return state;\n        default:\n            return state;\n    }\n}\n\nexport default story;","import { combineReducers } from \"redux\";\nimport app from \"./app/reducer\";\nimport story from \"./story/reducers\";\n\nconst rootReducer = combineReducers({\n   app,\n   story\n});\n\nexport default rootReducer;","import {applyMiddleware, compose} from \"redux\";\nimport thunk from \"redux-thunk\";\nimport {createLogger} from \"redux-logger\";\n\nconst isProd = process.env.NODE_ENV === 'production';\n\nconst middlewareList = [];\n\nmiddlewareList.push(thunk);\n\nif (!isProd) {\n    middlewareList.push(createLogger());\n}\n\nconst middleware = compose(applyMiddleware(...middlewareList));\n\n\nexport default  middleware;","import { createStore } from 'redux';\nimport reducer from \"./reducer\";\nimport middleware from \"./middleware\";\n\nconst configureStore = initialState => {\n    const store = createStore(reducer, initialState, middleware);\n    return store;\n}\n\nexport default configureStore;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GlobalStyles from \"./styles/global\";\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport configureStore from \"./store\";\nimport hackerNewsApi from \"./services/hackerNewsApi\";\n\nhackerNewsApi.getTopStoryIds().then(ids => console.log(ids));\n\nconst renderApp = () => {\n    const initialState = {};\n    const store = configureStore(initialState);\n    store.dispatch({ type: '@hnClone/@@INIT' });\n    ReactDOM.render(\n        <Provider store={store}>\n            <GlobalStyles />\n            <App />\n        </Provider>\n        ,\n        document.getElementById('root')\n    );\n}\n\nrenderApp();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}